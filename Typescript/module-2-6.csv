Front,Back
"📦 <b>Generics with Constraints in TypeScript</b>","<b>🧠 Emotional Hook:</b> Ever tried joining a club where only certain people qualify? Generics with constraints are TypeScript’s way of saying: “You’re welcome... but only if you meet the criteria!” 😎<br><br><b>📘 Definition:</b> A generic with constraints allows a function or class to accept any type — as long as it follows certain rules. This gives flexibility + safety.<br><br><b>🔄 Analogy:</b><br>1. Like a VIP list — you can come to the party if your name (properties) is on the list.<br>2. Like job requirements — you can apply, but only if you have certain skills (keys like `id`, `name`, `email`).<br>3. Like a smoothie recipe — you can mix fruits, but must include banana, mango, and milk! 🍌🥭🥛<br><br><b>💻 Example Code:</b><br>```ts<br>const addCourseToStudent = <T extends { id: number; name: string; email: string }>(<br>  student: T<br>) => {<br>  const course = 'Next Level Web Development';<br>  return { ...student, course };<br>};<br><br>// Works! Student has all required fields<br>const student1 = addCourseToStudent({<br>  id: 1,<br>  name: 'Alice',<br>  email: 'alice@example.com',<br>  favoriteColor: 'blue'<br>});<br><br>// ❌ Error if you miss a required property like 'email'<br>// const student2 = addCourseToStudent({ id: 2, name: 'Bob' });<br>```<br><br><b>🎯 Why It Matters:</b><br>Using constraints lets you write flexible, reusable code that avoids weird bugs by making sure the input always has what you need."
