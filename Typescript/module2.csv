Front,Back
"🧠 <b>Type Assertion in TypeScript</b>","<b>🎯 Emotional Hook:</b> Ever wore a costume at a party and pretended to be someone else? Type assertion lets variables do that in code!<br><br><b>📖 Definition:</b> Type assertion tells the compiler: 'Trust me, I know the actual type of this variable.' It's a way to override TypeScript's type inference.<br><br><b>🔧 Syntax:</b> <code>value as Type</code> or <code>&lt;Type&gt;value</code><br><br><b>🌍 Example:</b> <code>const result = kgToGm(1000) as number;</code><br><br><b>🔮 Analogy:</b> Like showing your ID at a club — you're asserting your 'type' to gain access!"
"🌀 <b>any Type</b>","<b>🔥 Emotional Hook:</b> Imagine a magic box that can hold anything — a toy, a phone, or a pizza! That’s what <code>any</code> is in TypeScript.<br><br><b>📖 Definition:</b> <code>any</code> allows a variable to be assigned any type — bypassing TypeScript's type checking.<br><br><b>⚠️ Caveat:</b> Overusing <code>any</code> defeats the purpose of using TypeScript!<br><br><b>🌍 Example:</b><br><code>let anything: any;</code><br><code>anything = 123;</code><br><code>anything = 'hello';</code><br><br><b>🔮 Analogy:</b> Like using a drawer labeled 'miscellaneous' — useful but messy."
"⚖️ <b>Union Types</b>","<b>💥 Emotional Hook:</b> Ever ordered a meal where you could pick rice <i>or</i> bread? Union types are like flexible menus in code!<br><br><b>📖 Definition:</b> Union types allow a variable or parameter to hold more than one type, using the <code>|</code> symbol.<br><br><b>🌍 Example:</b> <code>(value: string | number)</code> means value can be either a string or number.<br><br><b>🔮 Analogy:</b> Like saying: 'Bring me tea or coffee — I'm good with either!'"
"🧪 <b>Type Narrowing with typeof</b>","<b>🎯 Emotional Hook:</b> Picture a detective who checks clues to identify a suspect. <code>typeof</code> helps TypeScript narrow down what a variable really is.<br><br><b>📖 Definition:</b> Type narrowing is when you write code that checks a variable's type to safely access its properties.<br><br><b>🌍 Example:</b><br><code>if (typeof value === 'string') {...}</code><br><br><b>🔮 Analogy:</b> Like asking: 'Is this a key or a pen?' before using it properly."
"🧰 <b>Function with Union Return Types</b>","<b>💡 Emotional Hook:</b> Imagine a vending machine that sometimes gives snacks, sometimes gives change. That’s a function with flexible return types!<br><br><b>📖 Example:</b> <code>kgToGm(value: string | number): string | number</code><br><br><b>🌍 What it does:</b> Converts kilograms to grams and returns a string or number depending on input type.<br><br><b>🔮 Analogy:</b> Like a smart translator who can speak in your language or theirs depending on what you ask."
"⚠️ <b>Custom Error Typing in Try-Catch</b>","<b>🎯 Emotional Hook:</b> What if you could catch errors and still know exactly what type of problem it was? That's what typed errors do.<br><br><b>📖 Use:</b> You can assert the type of caught errors using <code>as</code>.<br><br><b>🌍 Example:</b><br><code>catch (error) { console.log((error as CustomError).message); }</code><br><br><b>🔮 Analogy:</b> Like having a first-aid kit labeled with what kind of injury it’s for — makes treating it easier!"
