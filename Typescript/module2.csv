Front,Back
"🧠 <b>Type Assertion in TypeScript</b>","<b>🎯 Emotional Hook:</b> Ever wore a costume at a party and pretended to be someone else? Type assertion lets variables do that in code!<br><br><b>📖 Definition:</b> Type assertion tells the compiler: 'Trust me, I know the actual type of this variable.' It's a way to override TypeScript's type inference.<br><br><b>🔧 Syntax:</b> <code>value as Type</code> or <code>&lt;Type&gt;value</code><br><br><b>🌍 Example:</b> <code>const result = kgToGm(1000) as number;</code><br><br><b>🔮 Analogy:</b> Like showing your ID at a club — you're asserting your 'type' to gain access!"
"🌀 <b>any Type</b>","<b>🔥 Emotional Hook:</b> Imagine a magic box that can hold anything — a toy, a phone, or a pizza! That’s what <code>any</code> is in TypeScript.<br><br><b>📖 Definition:</b> <code>any</code> allows a variable to be assigned any type — bypassing TypeScript's type checking.<br><br><b>⚠️ Caveat:</b> Overusing <code>any</code> defeats the purpose of using TypeScript!<br><br><b>🌍 Example:</b><br><code>let anything: any;</code><br><code>anything = 123;</code><br><code>anything = 'hello';</code><br><br><b>🔮 Analogy:</b> Like using a drawer labeled 'miscellaneous' — useful but messy."
"⚖️ <b>Union Types</b>","<b>💥 Emotional Hook:</b> Ever ordered a meal where you could pick rice <i>or</i> bread? Union types are like flexible menus in code!<br><br><b>📖 Definition:</b> Union types allow a variable or parameter to hold more than one type, using the <code>|</code> symbol.<br><br><b>🌍 Example:</b> <code>(value: string | number)</code> means value can be either a string or number.<br><br><b>🔮 Analogy:</b> Like saying: 'Bring me tea or coffee — I'm good with either!'"
"🧪 <b>Type Narrowing with typeof</b>","<b>🎯 Emotional Hook:</b> Picture a detective who checks clues to identify a suspect. <code>typeof</code> helps TypeScript narrow down what a variable really is.<br><br><b>📖 Definition:</b> Type narrowing is when you write code that checks a variable's type to safely access its properties.<br><br><b>🌍 Example:</b><br><code>if (typeof value === 'string') {...}</code><br><br><b>🔮 Analogy:</b> Like asking: 'Is this a key or a pen?' before using it properly."
"🧰 <b>Function with Union Return Types</b>","<b>💡 Emotional Hook:</b> Imagine a vending machine that sometimes gives snacks, sometimes gives change. That’s a function with flexible return types!<br><br><b>📖 Example:</b> <code>kgToGm(value: string | number): string | number</code><br><br><b>🌍 What it does:</b> Converts kilograms to grams and returns a string or number depending on input type.<br><br><b>🔮 Analogy:</b> Like a smart translator who can speak in your language or theirs depending on what you ask."
"⚠️ <b>Custom Error Typing in Try-Catch</b>","<b>🎯 Emotional Hook:</b> What if you could catch errors and still know exactly what type of problem it was? That's what typed errors do.<br><br><b>📖 Use:</b> You can assert the type of caught errors using <code>as</code>.<br><br><b>🌍 Example:</b><br><code>catch (error) { console.log((error as CustomError).message); }</code><br><br><b>🔮 Analogy:</b> Like having a first-aid kit labeled with what kind of injury it’s for — makes treating it easier!"
Front,Back
🆚 <b>Type vs Interface (Overview)</b>,"<b>🎯 Emotional Hook:</b> Two tools — same mission, different strengths!<br><br><b>📖 Type:</b> Used for defining any kind of type (objects, unions, tuples, functions).<br><b>📖 Interface:</b> Focused on describing the **shape of objects**.<br><br><b>🌍 Example:</b><br><code>type A = { name: string }</code><br><code>interface B { name: string }</code><br><br><b>🔮 Analogy:</b> Type is a **Swiss Army Knife**, Interface is a **blueprint**."
📦 <b>Extending with Interface</b>,"<b>🎯 Emotional Hook:</b> Like a child inheriting from a parent!<br><br><b>📖 Syntax:</b> <code>interface C extends A { role: string }</code><br><br><b>🌍 Example:</b><br><code>interface UserWithRole extends User { role: string }</code><br><br><b>🔮 Analogy:</b> Like making a copy of a base contract and adding more terms."
🔗 <b>Extending with Type (Intersection)</b>,"<b>🎯 Emotional Hook:</b> Merging two paths into one journey!<br><br><b>📖 Syntax:</b> <code>type C = A & { role: string }</code><br><br><b>🌍 Example:</b><br><code>type UserWithRole = User & { role: string }</code><br><br><b>🔮 Analogy:</b> Like combining two Lego sets into a bigger creation."
🔢 <b>Array Types (Index Signature)</b>,"<b>🎯 Emotional Hook:</b> Arrays are just objects with numbered keys!<br><br><b>📖 Type:</b> <code>type Roll = number[]</code><br><b>📖 Interface:</b> <code>interface Roll { [index: number]: number }</code><br><br><b>🌍 Example:</b><br><code>const roll: Roll = [1, 2, 3];</code><br><br><b>🔮 Analogy:</b> Like lockers labeled 0, 1, 2 storing numbers."
➕ <b>Function Type (with Type)</b>,"<b>🎯 Emotional Hook:</b> Math formulas as types!<br><br><b>📖 Syntax:</b> <code>type Add = (a: number, b: number) => number</code><br><br><b>🔮 Analogy:</b> Like labeling your calculator with specific input/output."
🧮 <b>Function Type (with Interface)</b>,"<b>🎯 Emotional Hook:</b> Interfaces can describe callable shapes too!<br><br><b>📖 Syntax:</b> <code>interface Add { (a: number, b: number): number }</code><br><br><b>🔮 Analogy:</b> Like a remote that only accepts two batteries and gives you a result."
🧠 <b>When to Use Type vs Interface?</b>,"<b>🛠 Use <code>type</code>:</b><br> - When working with unions, intersections, tuples, primitives.<br><b>🏗 Use <code>interface</code>:</b><br> - When describing object shapes or needing OOP-style inheritance.<br><br><b>✅ Pro Tip:</b> Interfaces are best for public APIs or class-like structures."
Front,Back
🌐 <b>What is a Generic?</b>,"<b>🎯 Emotional Hook:</b> Why copy-paste when you can reuse with type safety?<br><br><b>📖 Definition:</b> Generics let you define a placeholder (like <code>&lt;T&gt;</code>) that can be replaced by any type.<br><br><b>🧠 Syntax:</b> <code>type Box&lt;T&gt; = T[];</code><br><br><b>🔮 Analogy:</b> Like a lunch box that can carry rice, bread, or fruit depending on the day."
📦 <b>Generic Array</b>,"<b>🎯 Emotional Hook:</b> One pattern, many types!<br><br><b>🧠 Syntax:</b> <code>type GenericArray&lt;T&gt; = Array&lt;T&gt;;</code><br><b>✅ Examples:</b><br><code>GenericArray&lt;number&gt;</code> → [1, 2, 3]<br><code>GenericArray&lt;string&gt;</code> → ['a', 'b']<br><code>GenericArray&lt;User&gt;</code> → array of user objects<br><br><b>🔮 Analogy:</b> Like a vending machine that accepts different items based on customer choice."
👥 <b>Generic Object Array</b>,"<b>🎯 Emotional Hook:</b> A list of people — all checked for correct structure!<br><br><b>Example:</b><br><code>const users: GenericArray&lt;User&gt; = [{ name: 'Mezba', age: 100 }, ...]</code><br><br><b>🧠 Benefit:</b> Strong typing across all elements, no surprises."
🧳 <b>Generic Tuple</b>,"<b>🎯 Emotional Hook:</b> Store two (or more) values of different types — but keep it strict!<br><br><b>🧠 Syntax:</b> <code>type Pair&lt;X, Y&gt; = [X, Y];</code><br><br><b>🌍 Examples:</b><br><code>["Persian", "Mr. X"]</code> → GenericTuple&lt;string, string&gt;<br><code>[123, { name: 'X' }]</code> → GenericTuple&lt;number, User&gt;<br><br><b>🔮 Analogy:</b> Like assigning seats to two people in a row: one for the number, one for the profile."
📐 <b>Why Use Generics?</b>,"<b>🎯 Emotional Hook:</b> DRY + safe = developer bliss ✨<br><br><b>✅ Use When:</b><br> - You need reusable, type-safe utilities<br> - You're working with multiple data types<br><br><b>🧠 Pro Tip:</b> Use generic constraints (<code>&lt;T extends SomeType&gt;</code>) to make them even safer!"
Front,Back
🔧 <b>What is a Generic Interface?</b>,"<b>🎯 Emotional Hook:</b> Build a blueprint once, reuse forever — for any data type!<br><br><b>🧠 Syntax:</b><br><code>interface Box&lt;T&gt; { item: T }</code><br><br><b>📦 Example:</b> <code>Developer&lt;T, X = null&gt;</code> means T and X are placeholder types."
💼 <b>Generic Interface with Default Type</b>,"<b>🎯 Emotional Hook:</b> Give your API smart defaults!<br><br><b>🧠 Syntax:</b> <code>interface Dev&lt;T, X = null&gt; { ... }</code><br>If the second type isn’t passed, it defaults to <code>null</code>.<br><br><b>✅ Benefit:</b> Clean code and fewer errors when optional types are involved."
⌚ <b>Using Generic Interface with Custom Type</b>,"<b>📦 Example:</b><br><code>Developer&lt;EmilabWatch&gt;</code> means T = EmilabWatch, X = null<br><br><code>Developer&lt;AppleWatch, YamahaBike&gt;</code> means T = AppleWatch, X = YamahaBike<br><br><b>💡 Tip:</b> Strongly typed nested objects improve maintainability."
🚀 <b>Real-life Analogy</b>,"<b>Developer&lt;T, X&gt; is like:</b><br>- A developer with a smartwatch of type T<br>- Optionally owns a bike of type X<br><br><b>🔮 Analogy:</b> Imagine building a 'Developer Profile' form that works for any brand of smartwatch or bike. Generics give you that flexibility!"
🔒 <b>Why Use Generic Interfaces?</b>,"<b>🎯 Emotional Hook:</b> Future-proof your data structures.<br><br><b>✅ Benefits:</b><br>- Reusability<br>- Strong typing<br>- Customization without rewriting<br><br><b>📌 Use when:</b> You’re building flexible APIs or object structures."
Front,Back
🔁 <b>What is a Generic Function?</b>,"<b>🎯 Emotional Hook:</b> Write once, use forever — with any type!<br><br><b>🧠 Syntax:</b><br><code>const func = &lt;T&gt;(param: T): T =&gt; param;</code><br><br><b>✅ Benefit:</b> Strong typing + flexibility = scalable code."
🇧🇩 <b>Function with Generic Parameter</b>,"<b>📦 Example:</b><br><code>createArrayWithGeneric&lt;string&gt;('Bangladesh')</code> returns <code>['Bangladesh']</code><br><br><b>🧠 Concept:</b> Use angle brackets to specify types."
🧑‍💼 <b>Generic Function with Object Type</b>,"<b>📦 Example:</b><br><code>createArrayWithGeneric&lt;User&gt;({ id: 222, name: 'Mr. Pashan' })</code><br><br><b>✅ Tip:</b> Works great with complex types like users, products, and configs!"
🔗 <b>Generic Tuple Function</b>,"<b>📦 Example:</b><br><code>createArrayWithTuple&lt;string, number&gt;('Bangladesh', 222)</code> returns a pair with custom types.<br><br><b>🧠 Pattern:</b><br><code>&lt;T, Q&gt;(a: T, b: Q): [T, Q]</code>"
📚 <b>Adding Extra Fields with Generic Function</b>,"<b>📦 Example:</b><br><code>addCourseToStudent(student)</code><br>returns a new object with all <code>student</code> properties + <code>course</code><br><br><b>🧠 Concept:</b> Use spread operator inside generic functions."
🔍 <b>Why Use Generic Functions?</b>,"<b>✅ Reusability</b>: One logic fits all types<br><b>✅ Type Safety</b>: Catch errors at compile time<br><b>✅ DRY Code</b>: No need to rewrite functions for each type."
🧠 <b>Real-life Analogy</b>,"<b>Generic Function is like:</b> A customizable gift box 🎁 — you decide what's inside (number, string, user, etc.), but the wrapping logic stays the same!"
Front,Back
🚫 <b>What problem do constraints solve in generic functions?</b>,"They make sure that generic types have the required properties.<br><br>🧠 Example:<br><code>&lt;T extends { id: number }&gt;</code> ensures <code>T</code> has at least an <code>id</code>."
🛡️ <b>Generic Function with Constraint</b>,"<code>const addCourseToStudent = &lt;T extends { id: number; name: string; email: string }&gt;(student: T) =&gt; { ... }</code><br><br>✅ This ensures any <code>student</code> has <code>id</code>, <code>name</code>, and <code>email</code>."
🧪 <b>Can you pass extra properties with constraint?</b>,"Yes! As long as the required fields exist.<br><br><code>emni</code> or <code>devType</code> are allowed because they don't violate the structure."
🧩 <b>How to use custom types with constraints?</b>,"You can pass inline types or reusable ones:<br><code>addCourseToStudent&lt;{id:number, name:string, email:string, devType:string}&gt;({...})</code><br>or use a defined <code>interface Student</code>."
🎁 <b>Analogy: What is a generic constraint like?</b>,"Like a job application 📄 that says: 'Must have Name, ID, and Email.'<br>Anything extra (skills, experience) is fine, but missing a required field? ❌ Rejected!"
✅ <b>Benefits of Constraints</b>,"- Type safety<br>- Prevent runtime errors<br>- Enable smarter autocompletion<br>- Make code more readable and maintainable"
🚀 <b>Use case: addCourseToStudent</b>,"<code>addCourseToStudent</code> guarantees your object has the minimum student info, and then adds a <code>course</code> key. Perfect for merging data safely."
