"🏷️ <b>What is a Class?</b>","A blueprint to create objects with properties and methods.<br><br><code>class Animal {<br>&nbsp;&nbsp;name: string;<br>&nbsp;&nbsp;sound: string;<br><br>&nbsp;&nbsp;constructor(name: string, sound: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;&nbsp;&nbsp;this.sound = sound;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;makeSound() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.name} says ${this.sound}`);<br>&nbsp;&nbsp;}<br>}</code><br><br>💡 Think of it like a cookie cutter 🍪 — you can create many cookies (objects) from one cutter (class)."

"🧱 <b>What does the constructor() do?</b>","It initializes an object’s properties when the object is created using <code>new</code>.<br><br><code>class Car {<br>&nbsp;&nbsp;brand: string;<br><br>&nbsp;&nbsp;constructor(brand: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.brand = brand;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;drive() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.brand} is driving.`);<br>&nbsp;&nbsp;}<br>}<br><br>const tesla = new Car(\"Tesla\");<br>tesla.drive(); // Tesla is driving.</code><br><br>💡 Analogy: Like setting up a new employee’s ID card, name, and department on Day 1."

"🔓 <b>What does 'public' mean in TypeScript?</b>","It makes the property or method accessible from outside the class.<br><br><code>class Person {<br>&nbsp;&nbsp;public name: string;<br><br>&nbsp;&nbsp;constructor(name: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;}<br>}<br><br>const p = new Person(\"Alex\");<br>console.log(p.name); // Alex</code><br><br>💡 Example: <code>public name: string</code> means you can do <code>person.name</code> anywhere."

"🔉 <b>What is makeSound() in the class?</b>","A method that defines behavior — in this case, it prints a message based on the animal’s sound.<br><br><code>class Dog {<br>&nbsp;&nbsp;name: string;<br>&nbsp;&nbsp;sound: string;<br><br>&nbsp;&nbsp;constructor(name: string, sound: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;&nbsp;&nbsp;this.sound = sound;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;makeSound() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.name} goes \"${this.sound}\"`);<br>&nbsp;&nbsp;}<br>}<br><br>const rex = new Dog(\"Rex\", \"Woof!\");<br>rex.makeSound(); // Rex goes \"Woof!\"</code><br><br>💡 Analogy: Like pressing a toy button and hearing it make a noise! 🐶🔊"

"🐾 <b>How to create an object from a class?</b>","Use the <code>new</code> keyword with the class constructor.<br><br><code>class Book {<br>&nbsp;&nbsp;title: string;<br><br>&nbsp;&nbsp;constructor(title: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.title = title;<br>&nbsp;&nbsp;}<br>}<br><br>const myBook = new Book(\"TypeScript 101\");<br>console.log(myBook.title); // TypeScript 101</code><br><br>💡 You’re creating a real object (cookie) from the class (cookie cutter)."

"📣 <b>What does this.sound refer to?</b>","It refers to the <code>sound</code> property of the current object.<br><br><code>class Alarm {<br>&nbsp;&nbsp;sound: string;<br><br>&nbsp;&nbsp;constructor(sound: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.sound = sound;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;trigger() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Alarm goes: ${this.sound}`);<br>&nbsp;&nbsp;}<br>}<br><br>const fireAlarm = new Alarm(\"BEEP BEEP!\");<br>fireAlarm.trigger(); // Alarm goes: BEEP BEEP!</code><br><br>💡 <code>this</code> always points to the object calling the method."

"🧬 <b>What is class inheritance?</b>","<b>🧠 Emotional Hook:</b> Imagine a child inheriting traits from their parents — same happens in code!<br><br><b>📘 Definition:</b> Inheritance lets one class (child) use properties and methods from another class (parent).<br><br><b>💻 Example:</b><br><code>class Person {<br>&nbsp;&nbsp;name: string;<br>&nbsp;&nbsp;constructor(name: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;}<br>}<br><br>class Student extends Person {}</code><br><br><b>🔄 Analogy:</b><br>It’s like a student inheriting discipline and bedtime from their parent — no need to re-teach!"

"🧱 <b>What is the 'extends' keyword used for?</b>","<b>🧠 Emotional Hook:</b> Think of it like saying: 'I want to be everything my parent is... and maybe more!'<br><br><b>📘 Definition:</b> <code>extends</code> is used to inherit from a parent class.<br><br><b>💻 Example:</b><br><code>class Person {<br>&nbsp;&nbsp;name: string;<br>}<br><br>class Teacher extends Person {<br>&nbsp;&nbsp;subject: string;<br>}</code>"

"🚀 <b>What does 'super()' do in a constructor?</b>","<b>🧠 Emotional Hook:</b> Like calling your parent's constructor to make sure the house is ready before moving in! 🏠<br><br><b>📘 Definition:</b> <code>super()</code> calls the constructor of the parent class.<br><br><b>💻 Example:</b><br><code>class Person {<br>&nbsp;&nbsp;constructor(public name: string) {}<br>}<br><br>class Student extends Person {<br>&nbsp;&nbsp;constructor(name: string, public grade: number) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super(name);<br>&nbsp;&nbsp;}<br>}</code>"

"🗣️ <b>Can inherited classes use parent methods?</b>","<b>📘 Yes!</b> Child classes can use all public or protected methods from their parent.<br><br><b>💻 Example:</b><br><code>class Person {<br>&nbsp;&nbsp;sleep(hours: number) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Sleeping for ${hours} hours.`);<br>&nbsp;&nbsp;}<br>}<br><br>class Student extends Person {}<br><br>const student1 = new Student();<br>student1.sleep(6); // Sleeping for 6 hours</code><br><br><b>💡 Analogy:</b> Like knowing family recipes — even if you didn’t write them, you can cook them!"

"🎓 <b>How does a subclass add its own properties or methods?</b>","<b>🧠 Emotional Hook:</b> A child can have unique traits that the parent doesn’t!<br><br><b>📘 Explanation:</b> Just define new properties or methods inside the child class.<br><br><b>💻 Example:</b><br><code>class Person {<br>&nbsp;&nbsp;constructor(public name: string) {}<br>}<br><br>class Teacher extends Person {<br>&nbsp;&nbsp;designation: string;<br><br>&nbsp;&nbsp;constructor(name: string, designation: string) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;this.designation = designation;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;takeClass(hours: number) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.name} is teaching for ${hours} hours.`);<br>&nbsp;&nbsp;}<br>}</code>"

"💡 <b>What happens if you don’t call super()?</b>","<b>❌ Error!</b> TypeScript will throw an error because the parent constructor must run first.<br><br><b>🛠️ Always include:</b><br><code>super(...args)</code> inside the child constructor if it overrides the parent's constructor.<br><br><b>💻 Example:</b><br><code>class Person {<br>&nbsp;&nbsp;constructor(public name: string) {}<br>}<br><br>class Student extends Person {<br>&nbsp;&nbsp;constructor(name: string, public grade: number) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super(name); // ✅ Required<br>&nbsp;&nbsp;}<br>}</code>"

"🔍 <b>What are Type Guards in TypeScript?</b>","<b>🧠 Emotional Hook:</b> Imagine being a detective who inspects clues to find out what kind of suspect you’re dealing with — that’s what type guards do in code!<br><br><b>📘 Definition:</b> Type Guards are runtime checks that let TypeScript narrow down the type of a variable within a conditional block.<br><br><b>💻 Example:</b><br><code>function handle(param: string | number) {<br>&nbsp;&nbsp;if (typeof param === 'number') {<br>&nbsp;&nbsp;&nbsp;&nbsp;// param is number here<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(param.toFixed(2));<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;// param is string here<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(param.toUpperCase());<br>&nbsp;&nbsp;}<br>}</code><br><br><b>🔄 Analogy:</b><br>1. Like checking if a fruit is an apple or orange before eating.<br>2. Like verifying if a key fits a certain lock."

"🔢 <b>Using <code>typeof</code> as a Type Guard</b>","<b>🧠 Emotional Hook:</b> 'typeof' is like asking ‘What kind of thing is this?’ at runtime.<br><br><b>📘 Explanation:</b> Use <code>typeof</code> to check if a variable is a 'string', 'number', 'boolean', etc.<br><br><b>💻 Example:</b><br><code>function printLengthOrDouble(val: string | number) {<br>&nbsp;&nbsp;if (typeof val === 'string') {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(val.length);<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(val * 2);<br>&nbsp;&nbsp;}<br>}</code><br><br><b>🔄 Analogy:</b> Like sorting fruits into apples or bananas based on their shape."

"🔑 <b>Using <code>in</code> Operator for Type Guards</b>","<b>🧠 Emotional Hook:</b> Imagine checking if a house has a mailbox before delivering mail.<br><br><b>📘 Explanation:</b> Use the <code>in</code> operator to check whether an object contains a certain property.<br><br><b>💻 Example:</b><br><code>type AdminUser = { name: string; role: string; }<br>type NormalUser = { name: string }<br><br>function isAdmin(user: AdminUser | NormalUser) {<br>&nbsp;&nbsp;if ('role' in user) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('Admin');<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('Normal User');<br>&nbsp;&nbsp;}<br>}</code><br><br><b>🔄 Analogy:</b> Like checking if a phone has a fingerprint scanner before enabling fingerprint unlock."

"🎯 <b>What does your <code>add</code> function do?</b>","<b>🧠 Emotional Hook:</b> A super-smart adder that decides to add numbers or concatenate strings based on the input types.<br><br><b>📘 Explanation:</b> If both params are numbers, it sums them; otherwise, it converts to strings and concatenates.<br><br><b>💻 Example:</b><br><code>function add(a: string | number, b: string | number) {<br>&nbsp;&nbsp;if (typeof a === 'number' && typeof b === 'number') {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a + b;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return a.toString() + b.toString();<br>}<br><br>add('2', '3'); // '23'<br>add(2, 3); // 5</code><br><br><b>🔄 Analogy:</b> Like adding apples if you have apples, but making a fruit salad if you have mixed fruits."

"👤 <b>How does <code>getUser</code> handle different user types?</b>","<b>🧠 Emotional Hook:</b> Like a guard recognizing VIP guests by their badge.<br><br><b>📘 Explanation:</b> Checks if 'role' exists in the user object to determine if it's an admin.<br><br><b>💻 Example:</b><br><code>function getUserInfo(user: { name: string; role?: string }) {<br>&nbsp;&nbsp;if ('role' in user) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('Admin');<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('Normal User');<br>&nbsp;&nbsp;}<br>}</code><br><br><b>🔄 Analogy:</b> Like checking if someone has a backstage pass to let them into the VIP lounge."


"🐶 <b>What does <code>instanceof</code> do in TypeScript?</b>","<b>🧠 Emotional Hook:</b> Think of <code>instanceof</code> like checking if your pet belongs to a specific family.<br><br><b>📘 Explanation:</b> It checks if an object is an instance of a particular class.<br><br><b>💻 Example:</b><br>```ts<br>class Dog { bark() { console.log('Woof!'); } }<br>class Cat { meow() { console.log('Meow!'); } }<br><br>const animal = new Dog();<br><br>console.log(animal instanceof Dog); // true<br>console.log(animal instanceof Cat); // false<br>```<br><br><b>🔄 Analogy:</b> Like checking if a vehicle is a car or a bike by its blueprint."
🐕 <b>What is the purpose of the <code>isDog</code> function?</b>,"<b>🧠 Emotional Hook:</b> Imagine having a magic detector that confirms if an animal is a dog.<br><br><b>📘 Explanation:</b> <code>isDog</code> is a user-defined type guard that returns a boolean and narrows the type.<br><br><b>💻 Example:</b><br>```ts<br>class Animal {}<br>class Dog extends Animal { bark() { console.log('Woof!'); } }<br><br>function isDog(animal: Animal): animal is Dog {<br>  return animal instanceof Dog;<br>}<br><br>const pet: Animal = new Dog();<br><br>if (isDog(pet)) {<br>  pet.bark(); // Safe and valid because TypeScript knows pet is Dog<br>}<br>```<br><br><b>🔄 Analogy:</b> Like a badge that only dogs carry."
🐱 <b>How does <code>getAnimal</code> function use the custom type guards?</b>,"<b>🧠 Emotional Hook:</b> A smart pet handler that knows exactly how to interact with each pet.<br><br><b>📘 Explanation:</b> It uses <code>isDog</code> and <code>isCat</code> to determine the actual class of the animal before calling class-specific methods.<br><br><b>💻 Example:</b><br>```ts<br>class Animal { makeSound() { console.log('...'); } }<br>class Dog extends Animal { makeBark() { console.log('Woof!'); } }<br>class Cat extends Animal { makeMeaw() { console.log('Meow!'); } }<br><br>function isDog(animal: Animal): animal is Dog {<br>  return animal instanceof Dog;<br>}<br>function isCat(animal: Animal): animal is Cat {<br>  return animal instanceof Cat;<br>}<br><br>function getAnimal(animal: Animal) {<br>  if (isDog(animal)) animal.makeBark();<br>  else if (isCat(animal)) animal.makeMeaw();<br>  else animal.makeSound();<br>}<br><br>const myPet = new Cat();<br>getAnimal(myPet); // Output: Meow!<br>```<br><br><b>🔄 Analogy:</b> Like checking a pet’s breed before choosing the right toy."
🎯 <b>What’s the advantage of user-defined type guards?</b>,"<b>🧠 Emotional Hook:</b> Gives your code superpowers to know exact types at runtime.<br><br><b>📘 Explanation:</b> User-defined type guards extend TypeScript's ability to narrow types, especially in more complex or custom conditions.<br><br><b>💻 Example:</b><br>```ts<br>function isStringArray(val: any): val is string[] {<br>  return Array.isArray(val) && val.every(item => typeof item === 'string');<br>}<br><br>const value: any = ['apple', 'banana'];<br><br>if (isStringArray(value)) {<br>  console.log(value.join(', ')); // Safe: value is string[]<br>} else {<br>  console.log('Not a string array');<br>}<br>```<br><br><b>🔄 Analogy:</b> Like having a special ID scanner that knows exactly who’s who."
