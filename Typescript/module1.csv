Front,Back
"🔤 <b>String Type</b>","<b>🎯 Emotional Hook:</b> Think of your name on a name tag — it's always text!<br><br><b>📖 Definition:</b> The <code>string</code> type is used to store text data.<br><br><b>🌍 Example:</b> <code>let course: string = 'Next level web development';</code><br><br><b>🔮 Analogy:</b> Like labeling a box with a title — always in words!"
"🔢 <b>Number Type</b>","<b>🎯 Emotional Hook:</b> Like your roll number in class — always numeric!<br><br><b>📖 Definition:</b> The <code>number</code> type represents all numeric values (integers, floats, etc).<br><br><b>🌍 Example:</b> <code>let roll: number = 123;</code><br><br><b>🔮 Analogy:</b> Like a calculator only accepting numbers."
"✅ <b>Boolean Type</b>","<b>🎯 Emotional Hook:</b> Are you online? Yes or No. That’s boolean logic!<br><br><b>📖 Definition:</b> <code>boolean</code> is a true/false value.<br><br><b>🌍 Example:</b> <code>let isAdmin: boolean = true;</code><br><br><b>🔮 Analogy:</b> Like a light switch — only ON or OFF."
"❓ <b>Undefined vs Null</b>","<b>🎯 Emotional Hook:</b> Undefined is ‘never assigned’. Null is ‘intentionally empty’.<br><br><b>📖 Definition:</b><br><code>undefined</code>: variable declared but not assigned<br><code>null</code>: explicitly no value<br><br><b>🌍 Example:</b><br><code>let x: undefined = undefined;</code><br><code>let y: null = null;</code><br><br><b>🔮 Analogy:</b> Undefined = unopened gift 🎁; Null = empty gift box 🎁❌"
"🧑‍🤝‍🧑 <b>Array Type</b>","<b>🎯 Emotional Hook:</b> Like a friend list — names in order!<br><br><b>📖 Definition:</b> Arrays store multiple values of the same type in an ordered list.<br><br><b>🌍 Example:</b> <code>let friends: string[] = ['rachel', 'monica'];</code><br><br><b>🔮 Analogy:</b> Like a row of lockers — same shape, in a line."
"🔗 <b>Tuple Type</b>","<b>🎯 Emotional Hook:</b> Like a birthday card with fixed slots: name, age, isHappy!<br><br><b>📖 Definition:</b> A tuple is a fixed-length array with specific types in specific positions.<br><br><b>🌍 Example:</b> <code>let ageName: [number, string, boolean] = [50, 'Mr.X', true];</code><br><br><b>🔮 Analogy:</b> Like an ID card: [Age, Name, IsMarried] → exact format only."
"🏢 <b>Object Type</b>","<b>🎯 Emotional Hook:</b> Just like a student ID has name, ID, and class — an object stores info with keys.<br><br><b>📖 Definition:</b> Objects group related data using key–value pairs.<br><br><b>🌍 Example:</b><br><code>const user = { firstName: 'Mezbaul', lastName: 'Abedin' }</code><br><br><b>🔮 Analogy:</b> Like a contact in your phone with name, number, and photo."
"🔒 <b>Readonly & Optional Properties</b>","<b>🎯 Emotional Hook:</b> Some fields can’t change, and others are optional — like forms!<br><br><b>📖 Definition:</b><br><code>readonly</code>: can’t be changed<br><code>?</code>: optional<br><br><b>🌍 Example:</b> <code>readonly company: string;</code> & <code>middleName?: string;</code><br><br><b>🔮 Analogy:</b> Readonly = locked 🔒; Optional = optional checkbox ☑️"
"🧮 <b>Functions</b>","<b>🎯 Emotional Hook:</b> Like a vending machine — input money, get snacks. Functions take input and return output.<br><br><b>📖 Definition:</b> Reusable blocks of code that perform tasks or return values.<br><br><b>🌍 Example:</b><br><code>function add(num1: number, num2 = 10): number { return num1 + num2; }</code><br><br><b>🔮 Analogy:</b> Like a blender — put in fruit, get a smoothie!"
"🏹 <b>Arrow Functions</b>","<b>🎯 Emotional Hook:</b> A shorter way to write functions — like texting instead of writing a letter!<br><br><b>📖 Definition:</b> Arrow functions provide a compact syntax for writing functions.<br><br><b>🌍 Example:</b> <code>const add = (a: number, b: number): number => a + b;</code><br><br><b>🔮 Analogy:</b> Like shorthand notes — faster but same meaning."
"🧭 <b>Methods Inside Objects</b>","<b>🎯 Emotional Hook:</b> Your wallet isn’t just data — it has functions too (like opening)!<br><br><b>📖 Definition:</b> Functions inside objects are called methods and can access <code>this</code> to refer to the object.<br><br><b>🌍 Example:</b><br><code>addBalance(balance: number): string { return 'My new balance is: ' + (this.balance + balance); }</code><br><br><b>🔮 Analogy:</b> Like a remote control that controls itself."
"🧮 <b>Array Map Method</b>","<b>🎯 Emotional Hook:</b> Want to turn all apples into juice? Map does that to array elements!<br><br><b>📖 Definition:</b> <code>.map()</code> creates a new array by applying a function to every element.<br><br><b>🌍 Example:</b><br><code>const squares = [1, 2, 3].map(n => n * n);</code><br><br><b>🔮 Analogy:</b> Like using a stamp on every page — result is a new stamped copy."
Front,Back
"🧨 <b>Spread Operator (…)</b>","<b>🎯 Emotional Hook:</b> Like pouring all marbles from one jar into another!<br><br><b>📖 Definition:</b> Used to expand arrays or objects into individual elements/properties.<br><br><b>🌍 Example:</b><br><code>const allBros = [...bros1, ...bros2];</code><br><code>const merged = { ...mentors1, ...mentors2 };</code><br><br><b>🔮 Analogy:</b> Like unpacking luggage and mixing it into one bag."
"📦 <b>Rest Operator (…)</b>","<b>🎯 Emotional Hook:</b> Like saying 'Everyone else, follow me!'<br><br><b>📖 Definition:</b> Used to gather multiple values into a single array.<br><br><b>🌍 Example:</b><br><code>const greetFriends = (...friends: string[]) => {}</code><br><br><b>🔮 Analogy:</b> Like collecting all extras into a basket."
"🔍 <b>Object Destructuring</b>","<b>🎯 Emotional Hook:</b> Like opening a parcel and grabbing only the items you want.<br><br><b>📖 Definition:</b> Extract specific fields from an object into variables.<br><br><b>🌍 Example:</b><br><code>const { contactNo, name: { middleName: midName } } = user;</code><br><br><b>🔮 Analogy:</b> Like taking specific tools out of a toolbox."
"🧑‍🤝‍🧑 <b>Array Destructuring</b>","<b>🎯 Emotional Hook:</b> Like picking the 3rd friend in a group photo.<br><br><b>📖 Definition:</b> Assign array elements to variables by position.<br><br><b>🌍 Example:</b><br><code>const [, , bestFriend, ...rest] = myFriends;</code><br><br><b>🔮 Analogy:</b> Like saying 'skip the first 2 — give me the 3rd and the rest.'"
"🏷️ <b>Type Alias</b>","<b>🎯 Emotional Hook:</b> Like giving a nickname to a complex definition!<br><br><b>📖 Definition:</b> Use <code>type</code> to create a custom name for a type or structure.<br><br><b>🌍 Example:</b><br><code>type Student = { name: string; age: number; }</code><br><br><b>🔮 Analogy:</b> Like saving a contact name instead of always typing their number."
"👨‍🎓 <b>Optional Properties ( ? )</b>","<b>🎯 Emotional Hook:</b> Some students give email, some don’t — and that’s okay!<br><br><b>📖 Definition:</b> A property that may or may not exist on the object.<br><br><b>🌍 Example:</b><br><code>contactNo?: string;</code><br><br><b>🔮 Analogy:</b> Like optional toppings on a pizza 🍕."
"➕ <b>Function Type Alias</b>","<b>🎯 Emotional Hook:</b> Like writing a function contract once and reusing it!<br><br><b>📖 Definition:</b> Use <code>type</code> to define the shape of a function.<br><br><b>🌍 Example:</b><br><code>type Add = (num1: number, num2: number) => number;</code><br><br><b>🔮 Analogy:</b> Like defining a recipe format to reuse again and again."
"👥 <b>Custom Primitive Aliases</b>","<b>🎯 Emotional Hook:</b> Like giving a fancy title to a basic idea.<br><br><b>📖 Definition:</b> You can alias primitive types for better readability.<br><br><b>🌍 Example:</b><br><code>type UserName = string;</code><br><code>const userName: UserName = 'Persian';</code><br><br><b>🔮 Analogy:</b> Like calling water H₂O in chemistry class."
Front,Back
"🔀 <b>Union Type (|)</b>","<b>🎯 Emotional Hook:</b> One out of many — like choosing your favorite pizza topping!<br><br><b>📖 Definition:</b> A type that allows a value to be one of several types.<br><br><b>🌍 Example:</b><br><code>type Gender = 'male' | 'female';</code><br><br><b>🔮 Analogy:</b> Like picking one option from a dropdown."
"🧩 <b>Intersection Type (&)</b>","<b>🎯 Emotional Hook:</b> When two job titles merge — Fullstack!<br><br><b>📖 Definition:</b> Combines multiple types into one — must satisfy all.<br><br><b>🌍 Example:</b><br><code>type Fullstack = Frontend & Backend;</code><br><br><b>🔮 Analogy:</b> Like blending tea and milk to make milk tea!"
"⚖️ <b>Ternary Operator</b>","<b>🎯 Emotional Hook:</b> Quick decisions like flipping a coin!<br><br><b>📖 Definition:</b> A shorthand if-else condition.<br><br><b>🌍 Example:</b><br><code>const isAdult = age >= 18 ? 'adult' : 'not adult';</code><br><br><b>🔮 Analogy:</b> Like asking: If it rains, umbrella ☂️; else, sunglasses 🕶️."
"🔗 <b>Optional Chaining (?.)</b>","<b>🎯 Emotional Hook:</b> Safe property access like tiptoeing through unknown paths.<br><br><b>📖 Definition:</b> Prevents errors if a nested value is <code>null</code> or <code>undefined</code>.<br><br><b>🌍 Example:</b><br><code>user?.address?.permanentAddress</code><br><br><b>🔮 Analogy:</b> Like checking if a key exists before trying to unlock a door."
"🌫️ <b>Nullish Coalescing Operator (??)</b>","<b>🎯 Emotional Hook:</b> Fallback plan when something is truly missing.<br><br><b>📖 Definition:</b> Returns the right value only if the left is <code>null</code> or <code>undefined</code>.<br><br><b>🌍 Example:</b><br><code>const result = value ?? 'Default';</code><br><br><b>🔮 Analogy:</b> Like saying: “If no food is at home, we’ll eat outside.”"
"🚫 <b>Nullable Types</b>","<b>🎯 Emotional Hook:</b> Sometimes there’s nothing to search — and that’s okay!<br><br><b>📖 Definition:</b> Use union with <code>null</code> to allow absence.<br><br><b>🌍 Example:</b><br><code>const search = (val: string | null) => {...}</code><br><br><b>🔮 Analogy:</b> Like a mailbox that might be empty."
"🌀 <b>Unknown Type</b>","<b>🎯 Emotional Hook:</b> I don't know who you are… yet!<br><br><b>📖 Definition:</b> A type-safe version of <code>any</code> — must narrow it down.<br><br><b>🌍 Example:</b><br><code>if (typ
