"Question","Answer"
"What is a commit convention?","<p>A set of rules or guidelines for formatting commit messages to ensure consistency, clarity, and organization in version control history.</p><p><strong>Examples:</strong></p><ul><li><code>feat: add user authentication</code></li><li><code>fix: resolve null pointer exception</code></li><li><code>docs: update README file</code></li></ul>"
"Why are commit conventions important?","<p>They improve readability, enable automated changelogs, simplify collaboration, and make debugging easier.</p><p><strong>Examples:</strong></p><ul><li><code>chore(deps): update dependencies</code> (clear and concise)</li><li><code>fix(api): handle 500 server error</code> (easy to track)</li><li><code>feat(ui): add dark mode toggle</code> (collaboration-friendly)</li></ul>"
"What is the most widely used commit convention?","<p><strong>Conventional Commits</strong> is the most widely used convention.</p><p><strong>Examples:</strong></p><ul><li><code>feat(auth): add OAuth2 support</code></li><li><code>fix(login): handle invalid credentials</code></li><li><code>docs: add contributing guidelines</code></li></ul>"
"What is the basic structure of a Conventional Commit message?","<p>The basic structure is: <code>&lt;type&gt;[optional scope]: &lt;description&gt;</code></p><p><strong>Examples:</strong></p><ul><li><code>feat(api): add new endpoint</code></li><li><code>fix(ui): align button correctly</code></li><li><code>chore: update dependencies</code></li></ul>"
"What does the `type` in a commit message represent?","<p>The <code>type</code> indicates the kind of change being made.</p><p><strong>Examples:</strong></p><ul><li><code>feat</code>: A new feature (e.g., <code>feat: add search bar</code>)</li><li><code>fix</code>: A bug fix (e.g., <code>fix: resolve memory leak</code>)</li><li><code>docs</code>: Documentation changes (e.g., <code>docs: update API docs</code>)</li><li><code>style</code>: Code style changes (e.g., <code>style: fix indentation</code>)</li></ul>"
"What is the purpose of the `scope` in a commit message?","<p>The <code>scope</code> specifies the part of the codebase or project affected by the change.</p><p><strong>Examples:</strong></p><ul><li><code>feat(auth): add password reset</code></li><li><code>fix(api): handle timeout errors</code></li><li><code>refactor(ui): simplify navbar code</code></li></ul>"
"What is the `subject` in a commit message?","<p>The <code>subject</code> is a concise description of the change, written in the imperative mood.</p><p><strong>Examples:</strong></p><ul><li><code>Add user login functionality</code></li><li><code>Fix broken image rendering</code></li><li><code>Update README file</code></li></ul>"
"What is the `body` in a commit message?","<p>The <code>body</code> provides a detailed explanation of the change, including motivation and impact.</p><p><strong>Examples:</strong></p><ul><li><code>feat(api): add pagination support</code><br><code>This change adds pagination to the API to improve performance for large datasets.</code></li><li><code>fix(ui): align buttons correctly</code><br><code>The buttons were misaligned due to incorrect CSS margins. This fix resolves the issue.</code></li></ul>"
"What is the `footer` in a commit message?","<p>The <code>footer</code> includes metadata like issue tracker references.</p><p><strong>Examples:</strong></p><ul><li><code>Closes #123</code></li><li><code>Fixes #456</code></li><li><code>See also #789</code></li></ul>"
"What does `feat` stand for in a commit message?","<p><code>feat</code> stands for a new feature.</p><p><strong>Examples:</strong></p><ul><li><code>feat: add user registration</code></li><li><code>feat(api): add new endpoint</code></li><li><code>feat(ui): add dark mode</code></li></ul>"
"What does `fix` stand for in a commit message?","<p><code>fix</code> stands for a bug fix.</p><p><strong>Examples:</strong></p><ul><li><code>fix: resolve null pointer exception</code></li><li><code>fix(api): handle 404 errors</code></li><li><code>fix(ui): align buttons correctly</code></li></ul>"
"What does `docs` stand for in a commit message?","<p><code>docs</code> stands for documentation changes.</p><p><strong>Examples:</strong></p><ul><li><code>docs: update README</code></li><li><code>docs(api): add endpoint documentation</code></li><li><code>docs: fix typo in contributing guide</code></li></ul>"
"What does `style` stand for in a commit message?","<p><code>style</code> stands for code style or formatting changes.</p><p><strong>Examples:</strong></p><ul><li><code>style: fix indentation</code></li><li><code>style(ui): format CSS file</code></li><li><code>style: add missing semicolons</code></li></ul>"
"What does `refactor` stand for in a commit message?","<p><code>refactor</code> stands for code refactoring without fixing bugs or adding features.</p><p><strong>Examples:</strong></p><ul><li><code>refactor: simplify login logic</code></li><li><code>refactor(api): clean up endpoint code</code></li><li><code>refactor(ui): reorganize component structure</code></li></ul>"
"What does `test` stand for in a commit message?","<p><code>test</code> stands for adding or updating tests.</p><p><strong>Examples:</strong></p><ul><li><code>test: add unit tests for login</code></li><li><code>test(api): add integration tests</code></li><li><code>test: fix failing test cases</code></li></ul>"
"What does `chore` stand for in a commit message?","<p><code>chore</code> stands for maintenance or tooling changes.</p><p><strong>Examples:</strong></p><ul><li><code>chore: update dependencies</code></li><li><code>chore: add CI/CD configuration</code></li><li><code>chore(deps): upgrade npm packages</code></li></ul>"
"What is Gitmoji?","<p>Gitmoji is a commit convention that uses emojis to represent the type of change.</p><p><strong>Examples:</strong></p><ul><li><code>‚ú® Add new feature</code></li><li><code>üêõ Fix a bug</code></li><li><code>üìù Update documentation</code></li></ul>"
"What is the Angular Commit Guidelines?","<p>A commit convention similar to Conventional Commits, used in the Angular project.</p><p><strong>Examples:</strong></p><ul><li><code>feat(core): add lazy loading</code></li><li><code>fix(router): handle navigation errors</code></li><li><code>docs: update getting started guide</code></li></ul>"
"How do you reference an issue in a commit message?","<p>Use the footer to reference issues (e.g., <code>Closes #123</code>).</p><p><strong>Examples:</strong></p><ul><li><code>fix: resolve login bug</code><br><code>Closes #123</code></li><li><code>feat: add search functionality</code><br><code>Fixes #456</code></li></ul>"