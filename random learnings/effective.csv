"Front","Back"
"The Overthinking Trap 🤯","<b>Definition:</b> Delaying action by over-analyzing, leading to missed opportunities.<br><br><b>Example:</b> Researching business ideas for months but never launching.<br><br><b>Analogy:</b> 🔄 Spinning in a mental hamster wheel—lots of motion, no progress.<br><br><b>🛠 Problem-Solving:</b><br>✅ Use the 24-hour rule for decisions.<br>✅ Set a timer for research, then act.<br><br><b>📌 Application:</b><br>🔹 If starting a project, commit to a 1-hour research limit before drafting a prototype."
"Project-Based Learning 🛠️","<b>Definition:</b> Learning by building real-world projects instead of passive consumption.<br><br><b>Example:</b> Outline a website, then learn coding only as needed to build it.<br><br><b>Analogy:</b> 🏗️ Buying tools before blueprints—wasteful vs. buying tools to fix specific problems.<br><br><b>🛠 Problem-Solving:</b><br>✅ Start a project first.<br>✅ Learn only when stuck.<br><br><b>📌 Application:</b><br>🔹 Choose a project (e.g., podcast) and learn editing by creating Episode 1."
"Protege Effect 👨🏫","<b>Definition:</b> Teaching others solidifies your own learning.<br><br><b>Example:</b> Explaining 'how APIs work' to a friend reveals gaps in your knowledge.<br><br><b>Analogy:</b> 🎤 A musician learns more by performing than practicing alone.<br><br><b>🛠 Problem-Solving:</b><br>✅ Write weekly summaries.<br>✅ Record 2-min teaching videos.<br><br><b>📌 Application:</b><br>🔹 Post a Twitter thread explaining a topic you're mastering."
"Feynman Technique 🧠","<b>Definition:</b> Explain concepts simply to expose knowledge gaps.<br><br><b>Example:</b> Struggling to define 'blockchain' simply means you don't fully understand it.<br><br><b>Analogy:</b> 🗣️ If you can't explain it to a 6-year-old, you don't know it well enough.<br><br><b>🛠 Problem-Solving:</b><br>✅ Teach concepts out loud.<br>✅ Relearn unclear parts.<br><br><b>📌 Application:</b><br>🔹 Explain a skill you're learning to an imaginary child."
"Zeigarnik Effect ⏳","<b>Definition:</b> Unfinished tasks create mental tension that drives completion.<br><br><b>Example:</b> Starting a 5-minute workout often leads to a full session.<br><br><b>Analogy:</b> 🎢 Once on the rollercoaster, you're committed to the ride.<br><br><b>🛠 Problem-Solving:</b><br>✅ Start with trivial tasks.<br>✅ Leave projects mid-task.<br><br><b>📌 Application:</b><br>🔹 Open your work software first thing in the morning."
"Pattern Recognition 🧩","<b>Definition:</b> Brain prioritizes information relevant to active goals.<br><br><b>Example:</b> Noticing design trends while building a portfolio.<br><br><b>Analogy:</b> 🔍 Your brain becomes a magnet for relevant information.<br><br><b>🛠 Problem-Solving:</b><br>✅ Tie learning to projects.<br>✅ Define goals clearly.<br><br><b>📌 Application:</b><br>🔹 When studying, ask 'How does this help my project?'"
"Mental Masturbation 🧠","<b>Definition:</b> Passive learning without application that feels productive.<br><br><b>Example:</b> Watching 10 coding tutorials but never coding.<br><br><b>Analogy:</b> 🎮 Reading game manuals but never playing.<br><br><b>🛠 Problem-Solving:</b><br>✅ Ask 'What will I DO with this?'<br>✅ Implement immediately.<br><br><b>📌 Application:</b><br>🔹 After learning something, take one action within 24 hours."
"AI Prompt Engineering 🤖","<b>Definition:</b> Using AI to accelerate learning through strategic queries.<br><br><b>Example:</b> 'Create a 30-day Python learning regimen.'<br><br><b>Analogy:</b> 🧙‍♂️ Treating AI like a wizard - you need the right spells (prompts).<br><br><b>🛠 Problem-Solving:</b><br>✅ Use specific prompts.<br>✅ Ask for simplifications.<br><br><b>📌 Application:</b><br>🔹 Prompt: 'Explain [topic] like I'm 5 with examples.'"
"Time Blocking ⏱️","<b>Definition:</b> Structured learning sessions divided into focused blocks.<br><br><b>Example:</b> 90 mins building, 60 mins studying, 30 mins walking.<br><br><b>Analogy:</b> 🏗️ Construction crew with scheduled tasks vs. random work.<br><br><b>🛠 Problem-Solving:</b><br>✅ Calendar-block learning.<br>✅ Separate building vs. studying.<br><br><b>📌 Application:</b><br>🔹 Schedule 3 weekly 'build' sessions for your project."
"Guernica Effect 🎨","<b>Definition:</b> Starting small tasks creates momentum for larger ones.<br><br><b>Example:</b> Cleaning your desk leads to starting work.<br><br><b>Analogy:</b> 🚂 Getting a train moving takes energy, but then it rolls.<br><br><b>🛠 Problem-Solving:</b><br>✅ Begin with micro-tasks.<br>✅ Create starter rituals.<br><br><b>📌 Application:</b><br>🔹 Always start sessions with 5 minutes of easy work."
"Front","Back"
"Project-Based Learning (PBL) Full Process 🏗️","<b>Definition:</b> A learning method where you acquire skills by completing real-world projects.<br><br><b>Core Principle:</b> Learn by doing, not just consuming.<br><br><b>🔄 Process Flow:</b><br>1️⃣ <b>Define Your Project</b> (What will you BUILD?)<br>2️⃣ <b>Outline Requirements</b> (What skills/knowledge are needed?)<br>3️⃣ <b>Start Building Immediately</b> (Learn only when stuck)<br>4️⃣ <b>Struggle & Solve</b> (Research specific gaps)<br>5️⃣ <b>Complete & Reflect</b> (Teach what you learned)<br><br><b>📌 Example:</b><br>🔹 Project: Build a personal website<br>🔹 Skills: HTML/CSS, design, hosting<br>🔹 Process: Start with homepage → Learn flexbox when needed → Deploy imperfect version → Improve<br><br><b>⚡️ Pro Tips:</b><br>• Use the <b>24-hour rule</b> for research (limit prep time)<br>• Apply the <b>Feynman Technique</b> while building<br>• Document progress publicly (<b>Protege Effect</b>)<br><br><b>🚫 Avoid:</b><br>• Over-planning before starting<br>• Tutorial hell (watching without applying)<br>• Perfectionism in early stages"