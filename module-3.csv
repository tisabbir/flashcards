Front,Back
"🏷️ <b>What is a Class?</b>","A blueprint to create objects with properties and methods.<br><br>💡 Think of it like a cookie cutter 🍪 — you can create many cookies (objects) from one cutter (class)."
"🧱 <b>What does the constructor() do?</b>","It initializes an object’s properties when the object is created using <code>new</code>.<br><br>💡 Analogy: Like setting up a new employee’s ID card, name, and department on Day 1."
"🔓 <b>What does 'public' mean in TypeScript?</b>","It makes the property or method accessible from outside the class.<br><br>💡 Example: <code>public name: string</code> means you can do <code>dog.name</code> anywhere."
"🔉 <b>What is makeSound() in the class?</b>","A method that defines behavior — in this case, it prints a message based on the animal’s sound.<br><br>💡 Analogy: Like pressing a toy button and hearing it make a noise!"
"🐾 <b>How to create an object from a class?</b>","Use the <code>new</code> keyword: <code>const dog = new Animal(...)</code><br><br>💡 You’re creating a real object (cookie) from the class (cookie cutter)."
"📣 <b>What does this.sound refer to?</b>","It refers to the <code>sound</code> property of the current object.<br><br>💡 <code>this</code> always points to the object calling the method."
Front,Back
🧬 <b>What is class inheritance?</b>,"<b>🧠 Emotional Hook:</b> Imagine a child inheriting traits from their parents — same happens in code!<br><br><b>📘 Definition:</b> Inheritance lets one class (child) use properties and methods from another class (parent).<br><br><b>💻 Example:</b><br>```ts<br>class Student extends Person {}<br>```<br><br><b>🔄 Analogy:</b><br>It’s like a student inheriting discipline and bedtime from their parent — no need to re-teach!"
🧱 <b>What is the 'extends' keyword used for?</b>,"<b>🧠 Emotional Hook:</b> Think of it like saying: 'I want to be everything my parent is... and maybe more!'<br><br><b>📘 Definition:</b> <code>extends</code> is used to inherit from a parent class.<br><br><b>💻 Example:</b><br>```ts<br>class Teacher extends Person {}<br>```"
🚀 <b>What does 'super()' do in a constructor?</b>,"<b>🧠 Emotional Hook:</b> Like calling your parent's constructor to make sure the house is ready before moving in! 🏠<br><br><b>📘 Definition:</b> <code>super()</code> calls the constructor of the parent class.<br><br><b>💻 Example:</b><br>```ts<br>constructor(...) {<br>  super(name, age, address);<br>}<br>```"
🗣️ <b>Can inherited classes use parent methods?</b>,"<b>📘 Yes!</b> Children classes can use all public or protected methods of their parent.<br><br><b>💻 Example:</b><br>```ts<br>student1.getSleep(6);<br>```<br><br><b>💡 Analogy:</b> Like knowing family recipes — even if you didn’t write them, you can cook them!"
🎓 <b>How does a subclass add its own properties or methods?</b>,"<b>🧠 Emotional Hook:</b> A child can have unique traits that the parent doesn’t!<br><br><b>📘 Explanation:</b> Just define new properties/methods in the child class.<br><br><b>💻 Example:</b><br>```ts<br>class Teacher extends Person {<br>  designation: string;<br>  takeClass(num: number) {...}<br>}<br>```"
💡 <b>What happens if you don’t call super()?</b>,"<b>❌ Error!</b> TypeScript will complain because you must initialize the parent class first before the child.<br><br><b>🛠️ Always include:</b><br>```ts<br>super(name, age, address)<br>```"
Front,Back
🔍 <b>What are Type Guards in TypeScript?</b>,"<b>🧠 Emotional Hook:</b> Imagine being a detective who inspects clues to find out what kind of suspect you’re dealing with — that’s what type guards do in code!<br><br><b>📘 Definition:</b> Type Guards are checks that let TypeScript know the specific type of a variable within a conditional block.<br><br><b>💻 Example:</b><br>```ts<br>if (typeof param === 'number') { /* param is a number here */ }<br>```<br><br><b>🔄 Analogy:</b><br>1. Like checking if a fruit is an apple or an orange before eating.<br>2. Like verifying if a key fits a certain lock."
🔢 <b>Using <code>typeof</code> as a Type Guard</b>,"<b>🧠 Emotional Hook:</b> 'typeof' is like asking ‘What type of thing is this?’ at runtime.<br><br><b>📘 Explanation:</b> Use <code>typeof</code> to check if a variable is a 'string', 'number', etc.<br><br><b>💻 Example:</b><br>```ts<br>if (typeof param1 === 'number') {<br>  // treat param1 as number here<br>} else {<br>  // treat param1 as string here<br>}<br>```<br><br><b>🔄 Analogy:</b> Like sorting fruits into apples or bananas based on their shape."
🔑 <b>Using <code>in</code> Operator for Type Guards</b>,"<b>🧠 Emotional Hook:</b> Imagine checking if a house has a mailbox before delivering mail.<br><br><b>📘 Explanation:</b> Use <code>key in object</code> to check if the object has a specific property.<br><br><b>💻 Example:</b><br>```ts<br>if ('role' in user) {<br>  // user has 'role' property, so it's AdminUser<br>}<br>```<br><br><b>🔄 Analogy:</b> Like checking if a phone has a fingerprint scanner before enabling fingerprint unlock."
🎯 <b>What does your <code>add</code> function do?</b>,"<b>🧠 Emotional Hook:</b> A super-smart adder that decides to add numbers or concatenate strings based on the input types.<br><br><b>📘 Explanation:</b> If both params are numbers, it sums them; otherwise, it concatenates as strings.<br><br><b>💻 Example:</b><br>```ts<br>add('2', '3') // returns '23'<br>add(2, 3) // returns 5<br>```<br><br><b>🔄 Analogy:</b> Like adding apples if you have apples, but making a fruit salad if you have mixed fruits."
👤 <b>How does <code>getUser</code> handle different user types?</b>,"<b>🧠 Emotional Hook:</b> Like a guard recognizing VIP guests by their badge.<br><br><b>📘 Explanation:</b> Checks if 'role' exists in user to tell if admin or normal user.<br><br><b>💻 Example:</b><br>```ts<br>if ('role' in user) { console.log('Admin'); } else { console.log('Normal'); }<br>```<br><br><b>🔄 Analogy:</b> Checking if a person has a staff ID to know if they're admin or visitor."
Front,Back
🐶 <b>What does <code>instanceof</code> do in TypeScript?</b>,"<b>🧠 Emotional Hook:</b> Think of <code>instanceof</code> like checking if your pet belongs to a specific family.<br><br><b>📘 Explanation:</b> It checks if an object is an instance of a particular class.<br><br><b>💻 Example:</b><br>```ts<br>animal instanceof Dog // true if animal is created from Dog class<br>```<br><br><b>🔄 Analogy:</b> Like checking if a vehicle is a car or a bike by its blueprint."
🐕 <b>What is the purpose of the <code>isDog</code> function?</b>,"<b>🧠 Emotional Hook:</b> Imagine having a magic detector that confirms if an animal is a dog.<br><br><b>📘 Explanation:</b> <code>isDog</code> is a user-defined type guard that returns a boolean and narrows the type.<br><br><b>💻 Example:</b><br>```ts<br>const isDog = (animal: Animal): animal is Dog => {<br>  return animal instanceof Dog;<br>};<br>```<br><br><b>🔄 Analogy:</b> Like a badge that only dogs carry."
🐱 <b>How does <code>getAnimal</code> function use the custom type guards?</b>,"<b>🧠 Emotional Hook:</b> A smart pet handler that knows exactly how to interact with each pet.<br><br><b>📘 Explanation:</b> It calls <code>isDog</code> and <code>isCat</code> to safely narrow types and call specific methods.<br><br><b>💻 Example:</b><br>```ts<br>if (isDog(animal)) animal.makeBark();<br>else if (isCat(animal)) animal.makeMeaw();<br>else animal.makeSound();<br>```<br><br><b>🔄 Analogy:</b> Like checking a pet’s breed before choosing the right toy."
🎯 <b>What’s the advantage of user-defined type guards?</b>,"<b>🧠 Emotional Hook:</b> Gives your code superpowers to know exact types at runtime.<br><br><b>📘 Explanation:</b> They help TypeScript understand complex type narrowing beyond built-in guards.<br><br><b>🔄 Analogy:</b> Like having a special ID scanner that knows exactly who’s who."
Front,Back
🔓 <b>What does the <code>public</code> access modifier mean in a class?</b>,"<b>🧠 Emotional Hook:</b> Imagine a public notice board that everyone can see and write on.<br><br><b>📘 Explanation:</b> Public properties and methods are accessible from anywhere — inside or outside the class.<br><br><b>💻 Example:</b><br>```ts<br>class MyClass {<br>  public name: string;<br>}<br>const obj = new MyClass();<br>obj.name = 'Hello';<br>```<br><br><b>🔄 Analogy:</b> Like your phone number you share openly."
🔒 <b>What does the <code>private</code> access modifier do?</b>,"<b>🧠 Emotional Hook:</b> Think of a diary locked with a key — only you can open it.<br><br><b>📘 Explanation:</b> Private members can only be accessed inside the class itself, not outside or in subclasses.<br><br><b>💻 Example:</b><br>```ts<br>class MyClass {<br>  private secret: string;<br>}<br>const obj = new MyClass();<br>obj.secret // Error<br>```<br><br><b>🔄 Analogy:</b> Like your bank PIN, kept secret."
🔏 <b>What does <code>readonly</code> do when used with <code>public</code>?</b>,"<b>🧠 Emotional Hook:</b> Like your birth certificate — visible but unchangeable.<br><br><b>📘 Explanation:</b> Readonly properties can be accessed anywhere but cannot be changed after initialization.<br><br><b>💻 Example:</b><br>```ts<br>class MyClass {<br>  public readonly id: number;<br>}<br>const obj = new MyClass(1);<br>obj.id = 2; // Error<br>```<br><br><b>🔄 Analogy:</b> Like a fixed serial number on your phone."
💰 <b>Why is <code>_balance</code> private in <code>BankAccount</code>?</b>,"<b>🧠 Emotional Hook:</b> Protecting your money from sneaky changes.<br><br><b>📘 Explanation:</b> We hide the balance so only class methods can modify it, enforcing safe updates.<br><br><b>💻 Example:</b><br>```ts<br>private _balance: number;<br>addDeposit(amount: number) { this._balance += amount; }<br>```<br><br><b>🔄 Analogy:</b> Like a vault only the bank manager can open."
🎓 <b>Can <code>StudentAccount</code> access <code>_balance</code> directly?</b>,"<b>📘 Explanation:</b> No, because <code>_balance</code> is private to <code>BankAccount</code> and not visible in subclasses.<br><br>To access it, you must use public methods like <code>getBalance()</code> or <code>addDeposit()</code>.<br><br><b>🔄 Analogy:</b> You can’t open your parent's locked diary even if you live in the same house."
Front,Back
"💸 <b>What is a <code>getter</code> in TypeScript?</b>","<b>🧠 Emotional Hook:</b> Ever opened a window just to take a peek outside without changing anything?<br><br><b>📘 Explanation:</b> A getter allows you to access the value of a private or protected property as if it were a normal public property — without exposing the actual property.<br><br><b>💻 Example:</b><br>```ts<br>class BankAccount {<br>  protected _balance: number = 100;<br>  get balance() { return this._balance; }<br>}<br>const acc = new BankAccount();<br>console.log(acc.balance); // 100<br>```<br><br><b>🔄 Analogy:</b> Like a peephole in a door — you can look, but not touch or change anything!"
"🏦 <b>What is a <code>setter</code> in TypeScript?</b>","<b>🧠 Emotional Hook:</b> Imagine you're putting money into a vending machine by simply dropping it in.<br><br><b>📘 Explanation:</b> A setter lets you update a private or protected property from outside the class — with validation or logic if needed — using property-like syntax.<br><br><b>💻 Example:</b><br>```ts<br>class BankAccount {<br>  protected _balance: number = 100;<br>  set deposit(amount: number) {<br>    this._balance += amount;<br>  }<br>}<br>const acc = new BankAccount();<br>acc.deposit = 50;<br>```<br><br><b>🔄 Analogy:</b> Like depositing money into a bank ATM — you put in the amount, but the machine handles where it goes."
"🔒 <b>Why use <code>get</code> and <code>set</code> instead of public methods?</b>","<b>🧠 Emotional Hook:</b> Wouldn't it feel smoother to open your curtains instead of using a remote switch every time?<br><br><b>📘 Explanation:</b> Getters and setters make code cleaner and more natural to use, like accessing properties — but with the safety and control of methods.<br><br><b>💻 Example:</b><br>```ts<br>acc.deposit = 100; // instead of acc.addDeposit(100);<br>console.log(acc.balance); // instead of acc.getBalance();<br>```<br><br><b>🔄 Analogy:</b> Like smart home devices — behind the scenes it’s complex, but you just tap a button."
"🎯 <b>What's the difference between <code>balance</code> and <code>_balance</code>?</b>","<b>🧠 Emotional Hook:</b> Picture a museum: the artwork is visible to guests, but only curators can touch it.<br><br><b>📘 Explanation:</b> <code>_balance</code> is the protected internal data. <code>balance</code> (getter) safely exposes that data to the outside world.<br><br><b>💻 Example:</b><br>```ts<br>protected _balance: number;<br>get balance() { return this._balance; }<br>```<br><br><b>🔄 Analogy:</b> Like a protective glass over a cake — you can see it, but can’t poke it directly!"
Front,Back
"📏 <b>What does <code>static</code> mean in TypeScript?</b>","<b>🧠 Emotional Hook:</b> Imagine a classroom whiteboard — shared by all students, not owned by one.<br><br><b>📘 Explanation:</b> A <code>static</code> property or method belongs to the class itself, not to instances. All objects share the same static value.<br><br><b>💻 Example:</b><br>```ts<br>class Counter {<br>  static count = 0;<br>  static increment() { return ++Counter.count; }<br>}<br>Counter.increment();<br>```<br><br><b>🔄 Analogy:</b> Like a scoreboard in a stadium — everyone sees the same score, no matter where they sit!"
"👯 <b>Can each object have its own <code>static</code> value?</b>","<b>🧠 Emotional Hook:</b> Can different TV remotes show different time if they're all showing the clock from the same cable box?<br><br><b>📘 Explanation:</b> No! Static values are **shared** across all instances — changing one changes it for all.<br><br><b>💻 Example:</b><br>```ts<br>Counter.increment(); // 1<br>Counter.increment(); // 2<br>```<br>Even without creating any object, the class itself tracks the count.<br><br><b>🔄 Analogy:</b> Like a shared Google Doc — all changes are instantly visible to everyone."
"🚫 <b>Why can't we access <code>static</code> methods via instances?</b>","<b>🧠 Emotional Hook:</b> You don’t ask your clone for a family name — you ask the family itself!<br><br><b>📘 Explanation:</b> Static members exist on the class, not on objects. That’s why you must use <code>ClassName.method()</code> instead of <code>object.method()</code>.<br><br><b>💻 Example:</b><br>```ts<br>// ❌ new Counter().increment();<br>// ✅ Counter.increment();<br>```<br><br><b>🔄 Analogy:</b> Like the rules of chess — you ask the book, not the pieces."
"🧠 <b>When should you use <code>static</code> in real projects?</b>","<b>🧠 Emotional Hook:</b> Ever used a calculator app that works the same for every user?<br><br><b>📘 Explanation:</b> Use <code>static</code> when the data or behavior is common across all instances — like counters, utility functions, config settings.<br><br><b>💻 Example:</b><br>```ts<br>class Utils {<br>  static greet(name: string) { return `Hello, ${name}!`; }<br>}<br>console.log(Utils.greet('Sabbir'));<br>```<br><br><b>🔄 Analogy:</b> Like a shared microwave in an office — everyone uses the same one."
Front,Back
"🧠 <b>What is Polymorphism in TypeScript?</b>","<b>🎯 Emotional Hook:</b> Imagine one word — 'play' — meaning different things to a child, a musician, and a footballer.<br><br><b>📘 Definition:</b> Polymorphism allows different classes to define methods with the same name but different behaviors. It's like many shapes sharing the same interface but acting differently.<br><br><b>💻 Example:</b><br>```ts<br>class Person { getSleep() { console.log('8 hours'); } }<br>class Student extends Person { getSleep() { console.log('7 hours'); } }<br>class Developer extends Person { getSleep() { console.log('6 hours'); } }<br><br>const logSleep = (p: Person) => p.getSleep();<br>```<br><br><b>🔄 Analogy:</b> Like different instruments playing the same note — each sounds unique but follows the same musical key."
"🎭 <b>Why use Polymorphism?</b>","<b>✨ Emotional Hook:</b> Wouldn’t it be magical to call one method and get behavior based on who’s responding?<br><br><b>📘 Explanation:</b> Polymorphism helps in writing flexible and reusable code. You can call the same method on different types of objects without knowing their exact class.<br><br><b>💻 Example:</b><br>```ts<br>getSleepingHours(new Student());<br>getSleepingHours(new Developer());<br>```<br>This works because both are `Person` subclasses with their own `getSleep()` method.<br><br><b>🔄 Analogy:</b> Like using a single 'speak' command for different animals — dogs bark, cats meow, birds chirp."
"🟦 <b>Polymorphism with Shapes — What’s the Benefit?</b>","<b>🧠 Emotional Hook:</b> What if you could calculate area for ANY shape with just one function?<br><br><b>📘 Explanation:</b> The `Shape` base class defines a `getArea()` method. Subclasses like `Circle` and `Rectangle` override it to provide specific calculations.<br><br><b>💻 Example:</b><br>```ts<br>class Circle extends Shape {<br>  getArea() { return Math.PI * r * r; }<br>}<br>class Rectangle extends Shape {<br>  getArea() { return height * width; }<br>}<br>getShapeArea(new Circle(10));<br>```<br><br><b>🔄 Analogy:</b> Like different people filling out the same form — same interface, unique answers."
"🔁 <b>How does method overriding enable polymorphism?</b>","<b>🎯 Emotional Hook:</b> Think of siblings with the same parent — each with their own way of celebrating their birthday!<br><br><b>📘 Explanation:</b> Method overriding allows child classes to redefine a method inherited from a parent class. This lets polymorphism work, giving you dynamic behavior at runtime.<br><br><b>💻 Example:</b><br>```ts<br>class Shape { getArea(): number { return 0; } }<br>class Circle extends Shape { getArea(): number { return Math.PI * r * r; } }<br>```<br><br><b>🔄 Analogy:</b> Like customizing a family recipe — same dish name, different flavors."
Front,Back
"🧠 <b>What is Abstraction in TypeScript?</b>","<b>🎯 Emotional Hook:</b> Imagine using a microwave — you press buttons without knowing how the electricity heats your food!<br><br><b>📘 Definition:</b> Abstraction is the concept of hiding complex implementation details and showing only the necessary features.<br><br><b>💡 Use cases:</b> Create blueprints (interfaces or abstract classes) that describe how things should behave, not how they work.<br><br><b>🔄 Analogy:</b> Like using a TV remote — you only need to know the buttons, not the circuitry inside."
"🚗 <b>What is an Interface?</b>","<b>🎯 Emotional Hook:</b> Think of an interface like a contract — it says what must be done, but not how!<br><br><b>📘 Explanation:</b> An interface in TypeScript defines a set of methods and properties a class must implement. It’s all about the 'what', not the 'how'.<br><br><b>💻 Example:</b><br>```ts<br>interface Vehicle {<br>  startEngine(): void;<br>  stopEngine(): void;<br>  move(): void;<br>}<br><br>class Car implements Vehicle {<br>  startEngine() { console.log('Starting engine'); }<br>  stopEngine() { console.log('Stopping engine'); }<br>  move() { console.log('Moving car'); }<br>}```<br><br><b>🔄 Analogy:</b> Like a job posting — it lists the responsibilities, but not how you’ll complete them."
"🚙 <b>What is an Abstract Class?</b>","<b>🎯 Emotional Hook:</b> Imagine your favorite board game — the rulebook sets the structure, but each player can play their own way.<br><br><b>📘 Explanation:</b> An abstract class can have both abstract methods (no implementation) and normal methods (with implementation). It’s a partially completed blueprint.<br><br><b>💻 Example:</b><br>```ts<br>abstract class Car {<br>  abstract startEngine(): void;<br>  move() { console.log('Moving'); }<br>}<br>class Toyota extends Car {<br>  startEngine() { console.log('Starting Toyota'); }<br>}```<br><br><b>🔄 Analogy:</b> Like a parent recipe that must be customized by each child — “make curry,” but you decide the spices!"
"🤔 <b>Interface vs Abstract Class — What’s the Difference?</b>","<b>🎯 Emotional Hook:</b> Interfaces are like rules. Abstract classes are like templates with some rules already filled in.<br><br><b>📘 Summary:</b><br><ul><li>✅ Interface: Only declares method signatures, no code.</li><li>✅ Abstract class: Can have both abstract and implemented methods.</li><li>✅ A class can implement multiple interfaces but can only extend one abstract class.</li></ul><br><br><b>💻 Example:</b><br>```ts<br>interface Flyable { fly(): void; }<br>abstract class Bird { abstract fly(): void; sing() { console.log('Chirp'); } }<br>```<br><br><b>🔄 Analogy:</b> Interface = rulebook; Abstract Class = partly built house you must complete."
Front,Back
"🔐 <b>What are Access Modifiers in TypeScript?</b>","<b>🎯 Emotional Hook:</b> Ever wondered why you can’t access your teacher’s grading system, but you can read your own report card?<br><br><b>📘 Definition:</b> Access modifiers control where class properties and methods can be accessed from:<br><ul><li><code>public</code>: Accessible from anywhere</li><li><code>private</code>: Accessible only within the same class</li><li><code>protected</code>: Accessible within the class and its subclasses</li></ul><br><br><b>🔄 Analogy:</b> <br>1. Public = Street: anyone can walk<br>2. Protected = Home hallway: family members only<br>3. Private = Bedroom: only you!"
"🧭 <b>What does <code>public</code> mean?</b>","<b>🎯 Emotional Hook:</b> Imagine a public park — everyone is welcome!<br><br><b>📘 Explanation:</b> Members marked as <code>public</code> can be accessed from anywhere, even outside the class.<br><br><b>💻 Example:</b><br>```ts<br>class BankAccount {<br>  public name: string;<br>  constructor(name: string) { this.name = name; }<br>}<br>const account = new BankAccount('Alice');<br>console.log(account.name); // ✅ Works anywhere```<br><br><b>🔄 Analogy:</b> Like a town square — open to everyone!"
"🏠 <b>What does <code>private</code> mean?</b>","<b>🎯 Emotional Hook:</b> Think of your phone password — only you can use it!<br><br><b>📘 Explanation:</b> <code>private</code> members can only be accessed within the class itself — not even from subclasses or instances!<br><br><b>💻 Example:</b><br>```ts<br>class BankAccount {<br>  private balance: number = 100;<br>  private getBalance() { return this.balance; }<br>}<br>const acc = new BankAccount();<br>// acc.getBalance(); ❌ Error```<br><br><b>🔄 Analogy:</b> Like your diary — locked away, just for you!"
"👨‍👧 <b>What does <code>protected</code> mean?</b>","<b>🎯 Emotional Hook:</b> It's like a secret recipe shared only with your family!<br><br><b>📘 Explanation:</b> <code>protected</code> members are accessible inside the class and its child classes (but not outside).<br><br><b>💻 Example:</b><br>```ts<br>class BankAccount {<br>  protected _balance: number = 100;<br>}<br>class StudentAccount extends BankAccount {<br>  printBalance() { console.log(this._balance); } // ✅<br>}<br>const acc = new StudentAccount();<br>// acc._balance; ❌ Error```<br><br><b>🔄 Analogy:</b> Like a shared family vault — not public, but your kids get the key!"
Front,Back
"🛡️ <b>What is <code>readonly</code> in TypeScript?</b>","<b>🎯 Emotional Hook:</b> Imagine engraving your name on a trophy — once it's there, no one can change it!<br><br><b>📘 Definition:</b> The <code>readonly</code> modifier makes a property immutable after it's initialized — either in its declaration or inside the constructor.<br><br><b>💻 Example:</b><br>```ts<br>class User {<br>  public readonly id: number;<br>  constructor(id: number) {<br>    this.id = id;<br>  }<br>}<br>const user = new User(123);<br>// user.id = 456; ❌ Error```<br><br><b>🔄 Analogy:</b> Like a sealed envelope — you can write the address once, but you can't change it after sending!"
"🏗️ <b>What is Constructor Shorthand in TypeScript?</b>","<b>🎯 Emotional Hook:</b> Ever dreamt of doing less work but still getting full credit?<br><br><b>📘 Definition:</b> Constructor shorthand lets you declare and initialize class properties in one step by using access modifiers directly in the constructor.<br><br><b>💻 Example:</b><br>```ts<br>class Product {<br>  constructor(public name: string, private price: number) {}<br>}<br>const pen = new Product('Blue Pen', 5);```<br><br><b>🔄 Analogy:</b> Like ordering food from a combo menu — fewer choices to make, same result!"
"🎯 <b>What is Encapsulation?</b>","<b>🎯 Emotional Hook:</b> Have you ever used a phone without knowing how it works inside? That's encapsulation!<br><br><b>📘 Definition:</b> Encapsulation is the practice of hiding internal details of an object and exposing only what’s necessary.<br><br><b>💻 Example:</b><br>```ts<br>class BankAccount {<br>  private balance: number = 100;<br>  public deposit(amount: number) { this.balance += amount; }<br>}<br>const acc = new BankAccount();<br>acc.deposit(50); // ✅ Safe way to interact```<br><br><b>🔄 Analogy:</b> Like a vending machine — you press a button, get a drink, but don’t see the wires inside!"
"🧠 <b>What is Abstraction?</b>","<b>🎯 Emotional Hook:</b> When you drive a car, do you need to understand how the engine works? Nope. That’s abstraction!<br><br><b>📘 Definition:</b> Abstraction is the process of hiding implementation details and showing only essential features.<br><br><b>💻 Example (interface):</b><br>```ts<br>interface Vehicle { move(): void; }<br>class Car implements Vehicle { move() { console.log('Moving'); } }```<br><br><b>💻 Example (abstract class):</b><br>```ts<br>abstract class Animal { abstract makeSound(): void; }<br>class Dog extends Animal { makeSound() { console.log('Woof'); } }```<br><br><b>🔄 Analogy:</b> Like a TV remote — you know what each button does, not how the circuits work!"
