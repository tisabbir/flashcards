Front,Back
"⚠️ <b>What Are Data Anomalies?</b>","<b>💡 Emotional Hook:</b> Imagine your notes are messy—correcting one part messes up another. That’s an anomaly!<br><br><b>📖 Definition:</b> Unwanted problems that occur when data is poorly structured in a database.<br><br><b>🔍 When It Happens:</b> Mostly in unnormalized (flat) tables<br><br><b>🔮 Analogy:</b> Like a tangled earphone—one pull messes up everything!"
"✏️ <b>Update Anomaly</b>","<b>😫 Emotional Hook:</b> Ever changed your phone number and had to tell every group chat? That’s update anomaly!<br><br><b>📖 Problem:</b> Same data is stored in multiple places; updating one copy but forgetting the rest leads to inconsistency.<br><br><b>🌍 Example:</b> Changing a student's address in one record but not in others.<br><br><b>🔮 Analogy:</b> Like updating your profile picture on one app but not the others."
"🗑️ <b>Delete Anomaly</b>","<b>💥 Emotional Hook:</b> Imagine deleting an old photo and losing all your memories with it!<br><br><b>📖 Problem:</b> Deleting one record unintentionally removes valuable data.<br><br><b>🌍 Example:</b> Deleting the last student from a course also deletes the course info.<br><br><b>🔮 Analogy:</b> Like throwing away a paper with a phone number—and accidentally tossing the address too!"
"➕ <b>Insert Anomaly</b>","<b>🚫 Emotional Hook:</b> Want to add a course but can’t—because no student has enrolled yet? That’s insert anomaly.<br><br><b>📖 Problem:</b> You can’t insert data because some other related data is missing.<br><br><b>🌍 Example:</b> Can’t add a new course unless at least one student is enrolled in it.<br><br><b>🔮 Analogy:</b> Like being unable to create a party invite until someone RSVPs!"
Front,Back
"🧠 <b>What is Normalization?</b>","<b>💡 Emotional Hook:</b> Just like tidying your room helps you find things faster, normalization organizes your database for speed and clarity!<br><br><b>📖 Definition:</b> Process of organizing data to reduce redundancy and improve integrity.<br><br><b>🎯 Goal:</b> Break large tables into smaller ones and define relationships.<br><br><b>🔮 Analogy:</b> Like organizing books by genre in a library."
"🔗 <b>What is Functional Dependency?</b>","<b>💬 Emotional Hook:</b> If knowing your student ID tells everything about you, that’s dependency!<br><br><b>📖 Rule:</b> If t1.x = t2.x, then t1.y = t2.y ⇒ y depends on x<br><br><b>🌍 Example:</b> If two rows have the same StudentID, they must have the same Name and DOB.<br><br><b>🔮 Analogy:</b> Like one key opening only one locker."
"🌀 <b>0NF – Zero Normal Form</b>","<b>😬 Hook:</b> A messy drawer where everything is dumped in!<br><br><b>📖 Rule:</b> No structure; data may have repeating groups or arrays.<br><br><b>🌍 Example:</b> A table where phone numbers are stored like: '123, 456, 789'<br><br><b>🔮 Analogy:</b> Like a shopping list scribbled on a napkin."
"✅ <b>1NF – First Normal Form</b>","<b>🧽 Hook:</b> The first sweep of cleaning!<br><br><b>📖 Rule:</b> Atomic values only (no repeating groups or arrays)<br><br><b>🌍 Example:</b> Instead of '123,456', store phone numbers in separate rows.<br><br><b>🔮 Analogy:</b> Like listing one item per line in a checklist."
"🧱 <b>2NF – Second Normal Form</b>","<b>🔍 Hook:</b> Now things are sorted by category!<br><br><b>📖 Rule:</b> Must be in 1NF + No partial dependency (non-key attribute should depend on whole primary key)<br><br><b>🌍 Example:</b> In a table with (StudentID, CourseID) as key, the student's name should not depend only on StudentID.<br><br><b>🔮 Analogy:</b> Like a recipe book with separate sections for ingredients and steps."
"🧠 <b>3NF – Third Normal Form</b>","<b>🧘 Hook:</b> Now your data is calm and zen!<br><br><b>📖 Rule:</b> Must be in 2NF + No transitive dependency (non-key should not depend on another non-key)<br><br><b>🌍 Example:</b> If Student table has (ID, DeptID, DeptName), remove DeptName to a separate Dept table.<br><br><b>🔮 Analogy:</b> Like a clean desk—everything is where it truly belongs."
Front,Back
"💔 <b>Lossy Decomposition</b>","<b>😢 Emotional Hook:</b> Imagine tearing a photo and losing part of the image forever.<br><br><b>📖 Definition:</b> Splitting a table in a way that causes data loss or incorrect data when recombined.<br><br><b>🌍 Example:</b> Breaking a table into two without preserving full relationships.<br><br><b>🔮 Analogy:</b> Like cutting up a recipe card and forgetting the ingredients!"
"❤️ <b>Lossless Decomposition</b>","<b>🎯 Emotional Hook:</b> Like breaking LEGO parts apart and being able to rebuild the same structure perfectly.<br><br><b>📖 Definition:</b> Splitting a table so that no information is lost when rejoined using joins.<br><br><b>🌍 Example:</b> Dividing a table into Student(ID, Name) and Marks(ID, Score) and rejoining on ID.<br><br><b>🔮 Analogy:</b> Like unzipping a folder and then zipping it back—nothing is lost."
"🧩 <b>Partial Dependency</b>","<b>💡 Emotional Hook:</b> One piece of a puzzle giving away more than it should!<br><br><b>📖 Definition:</b> A non-key attribute depends on part of a composite primary key.<br><br><b>🌍 Example:</b> In table (StudentID, CourseID, Name), Name depends only on StudentID.<br><br><b>🚫 Breaks:</b> 2NF rule<br><br><b>🔮 Analogy:</b> Like judging a full story from just the title."
"🔗 <b>Transitive Dependency</b>","<b>🧠 Emotional Hook:</b> Trusting someone based on who *they* trust, not direct info!<br><br><b>📖 Definition:</b> A non-key attribute depends on another non-key attribute.<br><br><b>🌍 Example:</b> In table (ID, DeptID, DeptName), DeptName depends on DeptID, not directly on ID.<br><br><b>🚫 Breaks:</b> 3NF rule<br><br><b>🔮 Analogy:</b> Like getting your news from a friend of a friend."
"🛤️ <b>Intermediate/Junction Table</b>","<b>💬 Emotional Hook:</b> Think of a train station where two lines meet to switch routes!<br><br><b>📖 Definition:</b> A table used to handle many-to-many relationships in relational databases.<br><br><b>🌍 Example:</b> StudentCourses(StudentID, CourseID) links students and courses.<br><br><b>🔮 Analogy:</b> Like a bridge connecting two islands."
